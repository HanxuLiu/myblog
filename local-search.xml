<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ubuntu18.04/16.04下Shadowsocks服务器端安装及优化</title>
    <link href="/2021/05/23/Ubuntu18.0416.04%E4%B8%8BShadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <url>/2021/05/23/Ubuntu18.0416.04%E4%B8%8BShadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu18-04-16-04下Shadowsocks服务器端安装及优化"><a href="#Ubuntu18-04-16-04下Shadowsocks服务器端安装及优化" class="headerlink" title="Ubuntu18.04/16.04下Shadowsocks服务器端安装及优化"></a>Ubuntu18.04/16.04下Shadowsocks服务器端安装及优化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本教程旨在提供简明的Ubuntu 16.04下安装服务器端Shadowsocks。不同于Ubuntu 16.04之前的教程，本文抛弃initd，转而使用Ubuntu 16.04支持的Systemd管理Shadowsocks的启动与停止，显得更为便捷。优化部分包括BBR、TCP Fast Open以及吞吐量优化。</p><p>本教程仅适用于Ubuntu 16.04及之后的版本，基于Python 3，支持IPv6。</p><h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装<code>pip</code></h2><p>本教程使用Python 3为载体，因Python 3对应的包管理器<code>pip3</code>并未预装，首先安装<code>pip3</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install python3-pip<br></code></pre></td></tr></table></figure><h2 id="安装Shadowsocks"><a href="#安装Shadowsocks" class="headerlink" title="安装Shadowsocks"></a>安装Shadowsocks</h2><p>因Shadowsocks作者不再维护<code>pip</code>中的Shadowsocks（定格在了2.8.2），我们使用下面的命令来安装最新版的Shadowsocks：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip<br></code></pre></td></tr></table></figure><p>安装完成后可以使用下面这个命令查看Shadowsocks版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ssserver --version<br></code></pre></td></tr></table></figure><p>目前会显示“Shadowsocks 3.0.0”。</p><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>创建Shadowsocks配置文件所在文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mkdir /etc/shadowsocks<br></code></pre></td></tr></table></figure><p>然后创建配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/shadowsocks/config.json<br></code></pre></td></tr></table></figure><p>复制粘贴如下内容（注意修改密码“password”）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;server&quot;</span>:<span class="hljs-string">&quot;::&quot;</span>,<br>    <span class="hljs-attr">&quot;server_port&quot;</span>:<span class="hljs-number">8388</span>,<br>    <span class="hljs-attr">&quot;local_address&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-attr">&quot;local_port&quot;</span>:<span class="hljs-number">1080</span>,<br>    <span class="hljs-attr">&quot;password&quot;</span>:<span class="hljs-string">&quot;mypassword&quot;</span>,<br>    <span class="hljs-attr">&quot;timeout&quot;</span>:<span class="hljs-number">300</span>,<br>    <span class="hljs-attr">&quot;method&quot;</span>:<span class="hljs-string">&quot;chacha20-ietf-poly1305&quot;</span>,<br>    <span class="hljs-attr">&quot;fast_open&quot;</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>添加配置信息多用户</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 多用户</span><br>&#123;<br>    <span class="hljs-string">&quot;server&quot;</span>:<span class="hljs-string">&quot;::&quot;</span>,<br>    <span class="hljs-string">&quot;local_address&quot;</span>:<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;local_port&quot;</span>:<span class="hljs-number">1080</span>,<br>  <span class="hljs-string">&quot;port_password&quot;</span>:&#123;<br>         <span class="hljs-string">&quot;8888&quot;</span>:<span class="hljs-string">&quot;123456789&quot;</span>,<br>         <span class="hljs-string">&quot;9999&quot;</span>:<span class="hljs-string">&quot;123456789&quot;</span><br>  &#125;,<br>    <span class="hljs-string">&quot;timeout&quot;</span>:<span class="hljs-number">300</span>,<br>    <span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;aes-256-cfb&quot;</span>,<br>    <span class="hljs-string">&quot;fast_open&quot;</span>:<span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>添加配置信息单用户</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 单用户</span><br>&#123;<br>    <span class="hljs-string">&quot;server&quot;</span>:<span class="hljs-string">&quot;::&quot;</span>,<br>    <span class="hljs-string">&quot;server_port&quot;</span>:<span class="hljs-number">8388</span>,<br>    <span class="hljs-string">&quot;local_address&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;local_port&quot;</span>:<span class="hljs-number">1080</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456789&quot;</span>,<br>    <span class="hljs-string">&quot;timeout&quot;</span>:<span class="hljs-number">300</span>,<br>    <span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;aes-256-cfb&quot;</span>,<br>    <span class="hljs-string">&quot;fast_open&quot;</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">server：Shadowsocks服务器地址 <br>server_port：Shadowsocks服务器端口 <br>local_address：   本地IP<br>local_port：本地端口 <br>password：Shadowsocks连接密码 <br>timeout：等待超时时间 <br>method：加密方式 <br><span class="hljs-attr">workers</span>:          工作线程数 <br>fast_open：       <span class="hljs-literal">true</span>或<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="测试Shadowsocks配置"><a href="#测试Shadowsocks配置" class="headerlink" title="测试Shadowsocks配置"></a>测试Shadowsocks配置</h2><p>首先记录下服务器的IP地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure><p>找到IPv4地址（和IPv6地址），如我的<code>ifconfig</code>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">eth0      Link encap:Ethernet  HWaddr 46:91:89:4e:c1:52<br>          inet addr:138.68.51.55  Bcast:138.68.63.255  Mask:255.255.240.0<br>          inet6 addr: fe80::4491:89ff:fe4e:c152/64 Scope:Link<br>          inet6 addr: 2604:a880:2:d0::3727:7001/64 Scope:Global<br>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1<br>          RX packets:102667 errors:0 dropped:0 overruns:0 frame:0<br>          TX packets:7869 errors:0 dropped:0 overruns:0 carrier:0<br>          collisions:0 txqueuelen:1000<br>          RX bytes:151166937 (151.1 MB)  TX bytes:1151476 (1.1 MB)<br></code></pre></td></tr></table></figure><p>所以我的IPv4地址是<code>138.68.51.55</code>，IPv6地址是<code>2604:a880:2:d0::3727:7001</code>。</p><p>然后来测试下Shadowsocks能不能正常工作了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssserver -c /etc/shadowsocks/config.json<br></code></pre></td></tr></table></figure><p>在Shadowsocks客户端添加服务器，如果你使用的是我提供的那个配置文件的话，地址填写你的<code>IPv4地址</code>或<code>IPv6地址</code>，端口号为<code>8388</code>，加密方法为<code>chacha20-ietf-poly1305</code>，密码为<code>你设置的密码</code>。然后设置客户端使用全局模式，浏览器登录Google试试应该能直接打开了。</p><h2 id="配置Systemd管理Shadowsocks"><a href="#配置Systemd管理Shadowsocks" class="headerlink" title="配置Systemd管理Shadowsocks"></a>配置Systemd管理Shadowsocks</h2><p>新建Shadowsocks管理文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/systemd/system/shadowsocks-server.service<br></code></pre></td></tr></table></figure><p>复制粘贴：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">[Unit]<br>Description=Shadowsocks Server<br>After=network.target<br><br>[Service]<br>ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json<br>Restart=on-abort<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p><code>Ctrl + O</code>保存文件，<code>Ctrl + X</code>退出。</p><p>启动Shadowsocks：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start shadowsocks-server<br></code></pre></td></tr></table></figure><p>设置开机启动Shadowsocks：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> shadowsocks-server<br></code></pre></td></tr></table></figure><p>至此，Shadowsock服务器端的基本配置已经全部完成了！</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>这部分属于进阶操作，在你使用Shadowsocks时感觉到延迟较大，或吞吐量较低时，可以考虑对服务器端进行优化。</p><h3 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h3><p>BBR系Google最新开发的TCP拥塞控制算法，目前有着较好的带宽提升效果，甚至不比老牌的锐速差。</p><h4 id="升级Linux内核"><a href="#升级Linux内核" class="headerlink" title="升级Linux内核"></a>升级Linux内核</h4><p>BBR在Linux kernel 4.9引入。首先检查服务器kernel版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uname -r<br></code></pre></td></tr></table></figure><p>如果其显示版本在4.9.0之下，则需要升级Linux内核，否则请忽略下文。</p><h4 id="开启BBR-1"><a href="#开启BBR-1" class="headerlink" title="开启BBR"></a>开启BBR</h4><p>运行<code>lsmod | grep bbr</code>，如果结果中没有<code>tcp_bbr</code>，则先运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">modprobe tcp_bbr<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tcp_bbr&quot;</span> &gt;&gt; /etc/modules-load.d/modules.conf<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -p<br></code></pre></td></tr></table></figure><p>保存生效。运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl net.ipv4.tcp_available_congestion_control<br>sysctl net.ipv4.tcp_congestion_control<br></code></pre></td></tr></table></figure><p>若均有<code>bbr</code>，则开启BBR成功。</p><h3 id="优化吞吐量"><a href="#优化吞吐量" class="headerlink" title="优化吞吐量"></a>优化吞吐量</h3><p>新建配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/sysctl.d/local.conf<br></code></pre></td></tr></table></figure><p>复制粘贴：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs plain"># max open files<br>fs.file-max = 51200<br># max read buffer<br>net.core.rmem_max = 67108864<br># max write buffer<br>net.core.wmem_max = 67108864<br># default read buffer<br>net.core.rmem_default = 65536<br># default write buffer<br>net.core.wmem_default = 65536<br># max processor input queue<br>net.core.netdev_max_backlog = 4096<br># max backlog<br>net.core.somaxconn = 4096<br><br># resist SYN flood attacks<br>net.ipv4.tcp_syncookies = 1<br># reuse timewait sockets when safe<br>net.ipv4.tcp_tw_reuse = 1<br># turn off fast timewait sockets recycling<br>net.ipv4.tcp_tw_recycle = 0<br># short FIN timeout<br>net.ipv4.tcp_fin_timeout = 30<br># short keepalive time<br>net.ipv4.tcp_keepalive_time = 1200<br># outbound port range<br>net.ipv4.ip_local_port_range = 10000 65000<br># max SYN backlog<br>net.ipv4.tcp_max_syn_backlog = 4096<br># max timewait sockets held by system simultaneously<br>net.ipv4.tcp_max_tw_buckets = 5000<br># turn on TCP Fast Open on both client and server side<br>net.ipv4.tcp_fastopen = 3<br># TCP receive buffer<br>net.ipv4.tcp_rmem = 4096 87380 67108864<br># TCP write buffer<br>net.ipv4.tcp_wmem = 4096 65536 67108864<br># turn on path MTU discovery<br>net.ipv4.tcp_mtu_probing = 1<br><br>net.ipv4.tcp_congestion_control = bbr<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl --system<br></code></pre></td></tr></table></figure><p>编辑之前的shadowsocks-server.service文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/systemd/system/shadowsocks-server.service<br></code></pre></td></tr></table></figure><p>在<code>ExecStart</code>前插入一行，内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ExecStartPre=/bin/sh -c &#x27;ulimit -n 51200&#x27;<br></code></pre></td></tr></table></figure><p>即修改后的shadowsocks-server.service内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">[Unit]<br>Description=Shadowsocks Server<br>After=network.target<br><br>[Service]<br>ExecStartPre=/bin/sh -c &#x27;ulimit -n 51200&#x27;<br>ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json<br>Restart=on-abort<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p><code>Ctrl + O</code>保存文件，<code>Ctrl + X</code>退出。</p><p>重载shadowsocks-server.service：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>重启Shadowsocks：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart shadowsocks-server<br></code></pre></td></tr></table></figure><h3 id="开启TCP-Fast-Open"><a href="#开启TCP-Fast-Open" class="headerlink" title="开启TCP Fast Open"></a>开启TCP Fast Open</h3><p>TCP Fast Open可以降低Shadowsocks服务器和客户端的延迟。实际上在上一步已经开启了TCP Fast Open，现在只需要在Shadowsocks配置中启用TCP Fast Open。</p><p>编辑config.json：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/shadowsocks/config.json<br></code></pre></td></tr></table></figure><p>将<code>fast_open</code>的值由<code>false</code>修改为<code>true</code>。<code>Ctrl + O</code>保存文件，<code>Ctrl + X</code>退出。</p><p>重启Shadowsocks：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart shadowsocks-server<br></code></pre></td></tr></table></figure><p>注意：TCP Fast Open同时需要客户端的支持，即客户端Linux内核版本为3.7.1及以上；你可以在Shadowsocks客户端中启用TCP Fast Open。</p><p>至此，Shadowsock服务器端的优化已经全部完成了！</p>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shadowsocks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu更新SS以支持新的加密方法</title>
    <link href="/2021/05/23/Ubuntu%E6%9B%B4%E6%96%B0SS%E4%BB%A5%E6%94%AF%E6%8C%81%E6%96%B0%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95/"/>
    <url>/2021/05/23/Ubuntu%E6%9B%B4%E6%96%B0SS%E4%BB%A5%E6%94%AF%E6%8C%81%E6%96%B0%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu更新SS以支持新的加密方法"><a href="#Ubuntu更新SS以支持新的加密方法" class="headerlink" title="Ubuntu更新SS以支持新的加密方法"></a>Ubuntu更新SS以支持新的加密方法</h1><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>每次用 SSH 的方式登入服务器的时候，都会提示如下信息：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">Welcome <span class="hljs-keyword">to</span> Ubuntu *.*.* LTS (GNU/Linux *.*.*-*-generic x86_64)<br><br> * Documentation:  http<span class="hljs-variable">s:</span>//<span class="hljs-keyword">help</span>.ubuntu.<span class="hljs-keyword">com</span>/<br><br> ……<br><br><span class="hljs-number">13</span> packages can <span class="hljs-keyword">be</span> updated.<br><span class="hljs-number">10</span> updates are security updates.<br></code></pre></td></tr></table></figure><p>字面提示是有 13 个包可以升级，其中 10 个是安全更新。</p><p>事实上 Ubuntu 更新还是挺容易的，因为有 <code>apt-get</code>，不过更新完之后，还是会提示一些安全更新没做完，所以找了一下解决方案。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> update<br>apt-<span class="hljs-builtin-name">get</span><span class="hljs-built_in"> upgrade</span><br><span class="hljs-built_in"></span>apt-<span class="hljs-builtin-name">get</span> dist-upgrade<br></code></pre></td></tr></table></figure><h4 id="命令说明："><a href="#命令说明：" class="headerlink" title="命令说明："></a>命令说明：</h4><ul><li><code>apt-get update</code> 从服务器更新可用的软件包<strong>列表</strong>。</li><li><code>apt-get upgrade</code> 根据列表，更新已安装的软件包。这个命令<strong>不会</strong>删除在列表中已经没有的软件包，<strong>也不会</strong>安装有依赖需求但尚未安装的软件包。</li><li><code>apt-get dist-upgrade</code> 根据列表，更新已安装的软件包。这个命令可能会为了解决软件包冲突而删除一些已安装的软件包，也可能会为了解决软件包依赖问题安装新的软件包。</li></ul><p>所以使用上面三个命令完成更新之后，用 <code>reboot</code> 命令重启系统就行。<strong>需要注意的是，以上所有命令都需要在 root 权限下执行。</strong></p><p>更新完成之后，去启动 SS，然后就报错了，从没见过的错误：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">load</span> libsodium failed <span class="hljs-keyword">with</span> <span class="hljs-type">path</span> <span class="hljs-keyword">None</span><br></code></pre></td></tr></table></figure><p>不清楚是更新的系统造成的，还是其他原因，反正 SS 不能用了。搜索了一下，发现用这个 lib 的话，SS 可以支持新的高效率一点的加密方式 <code>chacha20</code> 等等这些。</p><p>于是乎，装一下 <code>libsodium</code> 吧~</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">apt-<span class="hljs-built_in">get</span> install build-essential<br>wget http<span class="hljs-variable">s:</span>//download.libsodium.org/libsodium/releases/LATEST.tar.gz<br>tar xf LATEST.tar.gz &amp;&amp; <span class="hljs-keyword">cd</span> libsodium-*.*.*<br>./configure &amp;&amp; <span class="hljs-keyword">make</span> -j4 &amp;&amp; <span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p>安装完毕之后，修改 SS 配置文件，把加密换成 <code>chacha20-ietf-poly1305</code>，启动 SS，没有任何报错，一切正常。</p><p>客户端也把加密方式修改成相应的，完成~~</p><h4 id="不用自己编译的安装方式（未验证）"><a href="#不用自己编译的安装方式（未验证）" class="headerlink" title="不用自己编译的安装方式（未验证）"></a>不用自己编译的安装方式（未验证）</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">add</span>-apt-repository <span class="hljs-keyword">pp</span><span class="hljs-variable">a:chris</span>-lea/libsodium<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;deb http://ppa.launchpad.net/chris-lea/libsodium/ubuntu trusty main&quot;</span> &gt;&gt; /etc/apt/sources.<span class="hljs-keyword">list</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;deb-src http://ppa.launchpad.net/chris-lea/libsodium/ubuntu trusty main&quot;</span> &gt;&gt; /etc/apt/sources.<span class="hljs-keyword">list</span><br>apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span> &amp;&amp; apt-<span class="hljs-built_in">get</span> install libsodium-dev<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shadowsocks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAC模式和全局代理模式的区别</title>
    <link href="/2021/05/23/PAC%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/05/23/PAC%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="PAC模式和全局代理模式的区别"><a href="#PAC模式和全局代理模式的区别" class="headerlink" title="PAC模式和全局代理模式的区别"></a>PAC模式和全局代理模式的区别</h1><h2 id="PAC模式"><a href="#PAC模式" class="headerlink" title="PAC模式"></a>PAC模式</h2><p>PAC模式也就是智能分流模式，根据规则去匹配你访问的网站，国外网站走代理，国内网站不走代理，非常智能，增加访问速度。</p><ul><li>优点：节省流量，国内网站依旧走本地网络，速度快，绝大部分国外网站都走代理，速度也快。</li><li>缺点：少部分国外网站会不经过代理，不能起到加速效果，甚至无法访问（解决方案：自己编辑PAC规则列表，将不走代理的国外网址加入进去，或者直接选择全局模式）。</li></ul><h2 id="全局模式"><a href="#全局模式" class="headerlink" title="全局模式"></a>全局模式</h2><p>全局模式就是国内、国外所有网站都走代理。</p><ul><li>优点：可访问全球所有网站。</li><li>缺点：所有网站都走代理，访问国内网站速度变慢，且耗流量。</li></ul>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shadowsocks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么用Markdown，而不用Word</title>
    <link href="/2021/05/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8Markdown%EF%BC%8C%E8%80%8C%E4%B8%8D%E7%94%A8Word/"/>
    <url>/2021/05/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8Markdown%EF%BC%8C%E8%80%8C%E4%B8%8D%E7%94%A8Word/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么用Markdown，而不用Word？"><a href="#为什么用Markdown，而不用Word？" class="headerlink" title="为什么用Markdown，而不用Word？"></a>为什么用Markdown，而不用Word？</h1><p><a href="https://www.zhihu.com/people/chen-shu-yi-21"><img src="https://pic1.zhimg.com/v2-9d019104896d4a8c9b94ba1ea53eadc9_xs.jpg?source=172ae18b" alt="陈树义"></a></p><p><a href="https://www.zhihu.com/people/chen-shu-yi-21">陈树义</a><a href="https://www.zhihu.com/question/48510028"></a></p><p>广州唯品会信息科技有限公司 Java开发工程师</p><p>854 人赞同了该文章</p><p>写博客、写文章比较多的人都知道 Markdown 是什么。</p><blockquote><p>Markdown 是一种轻量级标记语言，创始人为 John Gruber。它允许人们「使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）文档」。——维基百科</p></blockquote><p>简单地说，Markdown 与 HTML 语言一样，使用一些符号就代替样式。但是它比 HTML 语言更加简单。例如我想要实现标题样式，那么我可以这么做：</p><p><img src="https://pic1.zhimg.com/80/v2-169597b288329de5b969b341c5fed180_720w.jpg" alt="img"></p><h2 id="Markdown的本质"><a href="#Markdown的本质" class="headerlink" title="Markdown的本质"></a><strong>Markdown的本质</strong></h2><p>有些朋友会觉得，我用 Word 也可以实现同样的效果，为什么要使用 Markdown 呢？这个问题提得非常好，直戳问题本质。</p><p>Word 等其他文本编辑工具虽然也能实现同样的效果，但是其功能太强大了。Word 还能改变字体颜色，还可以调节字体大小。这么强大的功能可以说是 Word 的优点，但也可以说是它的缺点。</p><p>当功能多了，我们的注意力就会分散，我们就会去纠结：这个字体大小到底是 14 还是 16 好？我想强调这一句话，是要加粗还是标红？</p><p>而 Markdown 的出现让我们不需要去纠结这些问题。<strong>Markdown 的本质是让我们回归到内容本身，注重文章本身的结构，而不是样式。</strong></p><p>例如我们想要强调一句话，那么我们直接使用两个星号为其加粗，而不需要考虑是加粗还是标红（Markdown中只有黑色字体，没有其他颜色字体）。</p><p><img src="https://pic2.zhimg.com/80/v2-51ce4ea5fbdf997b5137476c14c18135_720w.jpg" alt="img"></p><p>你也不需要关心字体大小问题，因为 Markdown 中字体大小都与结构有关，无法手动设置。一级标题字体大一些，二级标题小一些。我们只需要关注哪些是一级标题，哪些是二级标题。而不需要去纠结标题字体到底要设置多大。</p><p><strong>Markdown 的本质是让我们回归内容本身。</strong> 当你明白这个道理的时候，你会明白为什么许多功能 Markdown 没有。</p><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a><strong>Markdown语法</strong></h2><p>原生的 Markdown 语法只包含了最基础的一些特性，例如：标题、加粗、斜体、段落、引用、超链接、图片、列表、代码块、水平分割线等。而一些自定义实现的编辑器，则有一些自定义的实现，例如：数学公式、TODO列表等。所以当你看到有一些语法在一个编辑可以用，但到另一个编辑器又用不了的时候，那么这个语法可能就不是通用的 Markdown 原生语法了。</p><p>Markdown 语法非常简单，基本上只要多用几次就会了。下面简单介绍一些常用的 Markdown 语法。</p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a><strong>段落</strong></h3><p>Markdown 使用 <code>#</code> 号来表示段落。</p><p><img src="https://pic4.zhimg.com/80/v2-ddbecf1f0fa5a9a5e92ab996d8863d23_720w.jpg" alt="img"></p><h3 id="加粗、斜体、加粗斜体"><a href="#加粗、斜体、加粗斜体" class="headerlink" title="加粗、斜体、加粗斜体"></a><strong>加粗、斜体、加粗斜体</strong></h3><p>Markdown 使用一个星号表示斜体，两个星号表示加粗，三个星号表示加粗斜体。</p><p><img src="https://pic4.zhimg.com/80/v2-4b35d8ad9479b746fa9ea0f45c06a6c3_720w.jpg" alt="img"></p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a><strong>无序列表</strong></h3><p>使用星号或者中横线来表示无序列表，注意后面需要加个空格。</p><p><img src="https://pic4.zhimg.com/80/v2-dcc81e176f9d783776cc6adcd5098773_720w.jpg" alt="img"></p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a><strong>有序列表</strong></h3><p>使用<code>数字+.</code>来表示有序列表，后面同样需要价格空格。</p><p><img src="https://pic4.zhimg.com/80/v2-de41880f5807e6f9fdde99c2742038b7_720w.jpg" alt="img"></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h3><p>Markdown 使用 <code>&gt;</code> 符号来表示引用。</p><p><img src="https://pic1.zhimg.com/80/v2-ade3a47093a0899a08074c7fc2c167c0_720w.jpg" alt="img"></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a><strong>超链接</strong></h3><p>Markdown 使用 <code>[]()</code> 来表示超链接，中括号表示链接文字，小括号表示链接地址。</p><p><img src="https://pic4.zhimg.com/80/v2-63cc3a2b007a0a449ac2d549d62c6277_720w.jpg" alt="img"></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h3><p>图片的样式与超链接非常相似，只需在前面加个感叹号就可以了，即用<code>![]()</code>表示图片。其中中括号表示图片未加载时的提示文字，小括号表示图片地址。</p><p><img src="https://pic1.zhimg.com/80/v2-a059af56aadb832034c4057c0f136824_720w.jpg" alt="img"></p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a><strong>代码块</strong></h3><p>我们使用 ` 号来表示代码块引用。</p><p><img src="https://pic2.zhimg.com/80/v2-736e127b8d833dc85e0499f7f817c3a1_720w.jpg" alt="img"></p><h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a><strong>水平分割线</strong></h3><p>使用 <code>---</code> 来表示分割线</p><p><img src="https://pic1.zhimg.com/80/v2-dc4df419d95a4bd2c05d8b7ab920fed8_720w.jpg" alt="img"></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h3><p>使用一根竖线来分隔各个单元格，使用冒号来决定单元格的对齐方向。</p><p><img src="https://pic4.zhimg.com/80/v2-3222f96f11294e78f28bc1f949965557_720w.jpg" alt="img"></p><h2 id="Markdown使用场景"><a href="#Markdown使用场景" class="headerlink" title="Markdown使用场景"></a><strong>Markdown使用场景</strong></h2><p>目前越来越多的站点都支持了 Markdown 语法，例如：Github 等代码托管平台，简书、博客园等写作平台。因此，掌握好 Markdown 语法可以非常方便地在各个主流站点使用。</p><h2 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a><strong>编辑工具</strong></h2><p>因为 Markdown 本质上是一个纯文本，所以任何能打开纯文本的东西都可以来编辑 Markdown。但如果你想要有预览功能，那么一款顺手的编辑功能还是有必要的。</p><p>在 Windows 上比较不错的编辑器有：MarkdownPad、Typora。在 OSX 上比较不错的编辑器有：Mou、MacDown、MWeb。</p><p>而我之前使用 MouDown 和 sublime 做简单的编辑，但是笔记等的就使用印象笔记写，而要发表的文章则使用 MWeb 编写。</p><h2 id="兼容神器"><a href="#兼容神器" class="headerlink" title="兼容神器"></a><strong>兼容神器</strong></h2><p>使用了 Markdown 可以写出条理非常清晰的文章，文章结构特别清晰。但是对于一些老编辑器而言，例如：ATLASSIAN 的 WIKI 对于 Markdown 的支持就很弱。</p><p>那么怎么办呢？</p><p>其实很简单，因为老的编辑器基本都支持 HTML，所以我们可以将 Markdown 渲染后的 HTML 复制到老编辑器。</p><p>我一般是在本地写好 Markdown 文章，之后直接复制到一个 Markdown 编辑器，然后复制对应的 HTML 文本到老编辑器中。</p><p><img src="https://pic4.zhimg.com/80/v2-394d2ecadb292765ac1d810cbe5672b3_720w.jpg" alt="img"></p><p>之后点击一下蓝色的复制按钮，就可以复制渲染后的 HTML 文本，最后直接粘贴到老编辑器中就可以了。我用的 Markdown 编辑器是：**<a href="https://link.zhihu.com/?target=https://mdnice.github.io/">https://mdnice.github.io/</a>**，样式非常漂亮。</p><h2 id="进阶应用"><a href="#进阶应用" class="headerlink" title="进阶应用"></a><strong>进阶应用</strong></h2><p>当你学会使用 Markdown 之后，你会发现 Markdown 还有更多好玩的地方。例如：开源的 gitbook 就可以教你把一个个 Markdown 文件组织起来，弄成一本电子书。</p><p><img src="https://pic2.zhimg.com/80/v2-cdc7ada790a4473145b3c1207a3f8495_720w.jpg" alt="img"></p><p>具体如何操作，可以参考这里：**<a href="https://link.zhihu.com/?target=https://github.com/chenyurong/gitbook-notebook">https://github.com/chenyurong/g</a>**</p>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora+Picgo+Gitee构建网络图床笔记</title>
    <link href="/2021/05/21/Typora+Picgo+Gitee%E6%9E%84%E5%BB%BA%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%BA%8A%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/05/21/Typora+Picgo+Gitee%E6%9E%84%E5%BB%BA%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%BA%8A%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Typora-Picgo-Gitee构建网络图床笔记"><a href="#Typora-Picgo-Gitee构建网络图床笔记" class="headerlink" title="Typora+Picgo+Gitee构建网络图床笔记"></a>Typora+Picgo+Gitee构建网络图床笔记</h1><p><strong>前言</strong></p><p>之前一直在Typora上记录自己的笔记，但是发现markdown格式的笔记在插入图片时，仅能采用两种方法：1）在线图床，2）本地路径，即图片并不是像Word那样集成在文档内的，因此经过一番研究，发现了最新版的Typora已经支持在线图床功能，遂写此篇教程帮助后人构建自己的在线图床markdown笔记。</p><h2 id="所需软件"><a href="#所需软件" class="headerlink" title="所需软件"></a><strong>所需软件</strong></h2><p>typora</p><p><a href="https://link.zhihu.com/?target=https://typora.io/">https://typora.io/</a></p><p>picgo</p><p><a href="https://link.zhihu.com/?target=https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>建议选择2.2.2正式版本，beta版本可能会存在不稳定的风险。</p><p><img src="https://pic3.zhimg.com/80/v2-be88c425ba401a71e9c91dca74f0d262_720w.jpg" alt="img"></p><p>Gitee</p><p>由于国内连接github时网络偶尔存在不稳定的情况，于是采用了gitee作为github图床的替代，但整体教程是一样的</p><p><a href="https://link.zhihu.com/?target=https://gitee.com/">https://gitee.com/</a></p><p><img src="https://pic3.zhimg.com/80/v2-daba73811b87533f8f032169d3d11d9a_720w.png" alt="img"></p><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a><strong>具体操作</strong></h2><p>主要是分为两部分操作，第一部分是Typora的配置，第二部分是Picgo+Gitee的在线图床配置</p><h3 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a><strong>Typora配置</strong></h3><p>打开Typora后，点击菜单栏-文件-偏好设置</p><p>找到其中的“图像”设置，将其设置为如下内容</p><p><img src="https://pic3.zhimg.com/80/v2-f374bec8d90d87c2f7683c1133064166_720w.jpg" alt="img"></p><p>1）<strong>插入图片时…<strong>下边的选择框内选择</strong>上传图片</strong></p><p>2）勾选上“<strong>对本地位置的图片应用上述规则</strong>”</p><p>3）上传服务选择<strong>PicGo(app)</strong></p><p>4）将<strong>PicGo路径</strong>项设置为本地PicGo的安装路径</p><p>这样，我们就把Typora配置好了，下面我们进行PicGo+Gitee的网络图床构建</p><h3 id="网络图床配置"><a href="#网络图床配置" class="headerlink" title="网络图床配置"></a><strong>网络图床配置</strong></h3><p>首先，安装好PicGo之后，我们需要给PicGo配置插件以支持Gitee图床</p><p><strong>注意</strong>：你必须安装<a href="https://link.zhihu.com/?target=https://nodejs.org/en/">Node.js</a>之后才能安装PicGo的插件，因为PicGo要使用<code>npm</code>来安装插件。</p><p>安装好Nodejs后，点开左边的<strong>插件设置</strong>一栏，在输入框内输入“github plus”，如下</p><p><img src="https://pic1.zhimg.com/80/v2-270b499aeadae15d014215b32b1204c8_720w.jpg" alt="img"></p><p>点击安装此插件，之后左侧选项栏<strong>图床设置</strong>会多一个<strong>githubplus</strong></p><p><img src="https://pic1.zhimg.com/80/v2-1fd1e0c2ef8c48f1d85a5a04b8566714_720w.png" alt="img"></p><p>接下来我们配置Gitee仓库以存储图片</p><p>1）进入<a href="https://link.zhihu.com/?target=https://gitee.com/">https://gitee.com/</a>，没有账号的话，先注册账号，注册以后登录，新建一个<strong>公开仓库</strong>，名字为picgo（可以自己起其他名字）</p><p>2）点击右上角，进入<strong>设置</strong>，在左侧的<strong>安全设置-私人令牌</strong>处生成新令牌。（注意：生成的新令牌只会显示一次，一定要保存好！！！）</p><p>我们需要做的如下：</p><p>1）回到picgo，按照如下进行设置</p><p><img src="https://pic3.zhimg.com/80/v2-dceba8a3986c7df4dbc3f8cb1e8ca60e_720w.jpg" alt="img"></p><p>其中的repo为 <strong>UserName/仓库名称</strong> 格式</p><p>branch填入master</p><p>Token为刚才在Gitee生成的私人令牌，粘贴到这里就行</p><p>path为仓库下用于存储图片的路径，这个可以自行选择</p><p>最下边的origin部分选择gitee（默认是github）</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a><strong>结束</strong></h2><p>经过上述操作，我们就把typora+picgo+gitee成功配置好了，之后当我们将本地的图片粘贴到markdown文档内的时候，typora会自动将图片上传到刚才我们配置好的gitee仓库内，并自动把markdown文档内的本地路径转化为gitee的图片外链，便于我们以后进行多端访问文档内的图片。</p>]]></content>
    
    
    <categories>
      
      <category>搭建图床</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Picgo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/05/19/hello-world/"/>
    <url>/2021/05/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
